#include <iostream>
using namespace std;

// Node structure
class Node {
public:
    int data;
    Node* next;
    Node(int new_data) {
        data = new_data;
        next = nullptr;
    }
};

// Insert at the beginning
void insertAtBeginning(Node*& head, int data) {
    Node* newNode = new Node(data);
    newNode->next = head;
    head = newNode;
    cout << data << " inserted at the beginning.\n";
}

// Insert at the end
void insertAtEnd(Node*& head, int data) {
    Node* newNode = new Node(data);
    if (head == nullptr) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
    }
    cout << data << " inserted at the end.\n";
}

// Insert before or after a specific node
void insertBeforeAfter(Node*& head, int target, int data, bool before) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }

    if (before) {
        if (head->data == target) {
            insertAtBeginning(head, data);
            return;
        }
        Node* prev = nullptr;
        Node* current = head;
        while (current != nullptr && current->data != target) {
            prev = current;
            current = current->next;
        }
        if (current == nullptr) {
            cout << "Node " << target << " not found.\n";
            return;
        }
        Node* newNode = new Node(data);
        prev->next = newNode;
        newNode->next = current;
        cout << data << " inserted before " << target << ".\n";
    } else {
        Node* current = head;
        while (current != nullptr && current->data != target) {
            current = current->next;
        }
        if (current == nullptr) {
            cout << "Node " << target << " not found.\n";
            return;
        }
        Node* newNode = new Node(data);
        newNode->next = current->next;
        current->next = newNode;
        cout << data << " inserted after " << target << ".\n";
    }
}

// Delete from the beginning
void deleteFromBeginning(Node*& head) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }
    Node* temp = head;
    head = head->next;
    cout << "Deleted " << temp->data << " from the beginning.\n";
    delete temp;
}

// Delete from the end
void deleteFromEnd(Node*& head) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }
    if (head->next == nullptr) {
        cout << "Deleted " << head->data << " from the end.\n";
        delete head;
        head = nullptr;
        return;
    }
    Node* prev = nullptr;
    Node* current = head;
    while (current->next != nullptr) {
        prev = current;
        current = current->next;
    }
    cout << "Deleted " << current->data << " from the end.\n";
    prev->next = nullptr;
    delete current;
}

// Delete a specific node
void deleteSpecificNode(Node*& head, int target) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }
    if (head->data == target) {
        Node* temp = head;
        head = head->next;
        cout << "Deleted node " << target << ".\n";
        delete temp;
        return;
    }
    Node* prev = head;
    Node* current = head->next;
    while (current != nullptr && current->data != target) {
        prev = current;
        current = current->next;
    }
    if (current == nullptr) {
        cout << "Node " << target << " not found.\n";
        return;
    }
    prev->next = current->next;
    cout << "Deleted node " << target << ".\n";
    delete current;
}

// Search for a node and display its position
void searchNode(Node* head, int target) {
    int pos = 1;
    Node* current = head;
    while (current != nullptr) {
        if (current->data == target) {
            cout << "Node " << target << " found at position " << pos << ".\n";
            return;
        }
        current = current->next;
        pos++;
    }
    cout << "Node " << target << " not found.\n";
}

// Display all nodes
void displayList(Node* head) {
    if (head == nullptr) {
        cout << "List is empty.\n";
        return;
    }
    Node* current = head;
    cout << "List contents: ";
    while (current != nullptr) {
        cout << current->data;
        if (current->next != nullptr)
            cout << " -> ";
        current = current->next;
    }
    cout << endl;
}

// Main function with menu-driven interface
int main() {
    Node* head = nullptr;
    int choice, data, target;
    bool beforeAfter;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert at the beginning\n";
        cout << "2. Insert at the end\n";
        cout << "3. Insert before or after a specific node\n";
        cout << "4. Delete from the beginning\n";
        cout << "5. Delete from the end\n";
        cout << "6. Delete a specific node\n";
        cout << "7. Search for a node\n";
        cout << "8. Display all nodes\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                cout << "Enter data to insert at beginning: ";
                cin >> data;
                insertAtBeginning(head, data);
                break;
            case 2:
                cout << "Enter data to insert at end: ";
                cin >> data;
                insertAtEnd(head, data);
                break;
            case 3:
                cout << "Enter target node value: ";
                cin >> target;
                cout << "Enter new data to insert: ";
                cin >> data;
                cout << "Insert before or after? (1 for before, 0 for after): ";
                cin >> beforeAfter;
                insertBeforeAfter(head, target, data, beforeAfter);
                break;
            case 4:
                deleteFromBeginning(head);
                break;
            case 5:
                deleteFromEnd(head);
                break;
            case 6:
                cout << "Enter node value to delete: ";
                cin >> target;
                deleteSpecificNode(head, target);
                break;
            case 7:
                cout << "Enter node value to search: ";
                cin >> target;
                searchNode(head, target);
                break;
            case 8:
                displayList(head);
                break;
            case 9:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }

    } while(choice != 9);

    return 0;
}
