#include <iostream>
using namespace std;

class Node {
    public:
    int data;
    Node* next;
    Node(int new_data) {
        data = new_data;
        next = NULL;
    }
};
class CLL {
    private:
    Node* last; 
    public:
    CLL() {
        last = NULL;
    }
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        if (last == NULL) {
            last = newNode;
            last->next = last; 
        } else {
            newNode->next = last->next;
            last->next = newNode;
        }
        cout << "Node inserted at beginning.\n";
    }
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (last == NULL) {
            last = newNode;
            last->next = last;
        } else {
            newNode->next = last->next;
            last->next = newNode;
            last = newNode;
        }
        cout << "Node inserted at end.\n";
    }
    void insertAfter(int key, int value) {
        if (last == NULL) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = last->next;
        do {
            if (temp->data == key) {
                Node* newNode = new Node(value);
                newNode->next = temp->next;
                temp->next = newNode;
                if (temp == last)  
                    last = newNode;
                cout << "Node inserted after " << key << ".\n";
                return;
            }
            temp = temp->next;
        } while (temp != last->next);

        cout << "Node " << key << " not found\n";
    }
    void insertBefore(int key, int value) {
        if (last == NULL) {
            cout << "Emprty\n";
            return;
        }
        Node* current = last->next;
        Node* prev = last;

        do {
            if (current->data == key) {
                Node* newNode = new Node(value);
                newNode->next = current;
                prev->next = newNode;

                if (current == last->next) 
                    last->next = newNode;

                cout << "Node inserted before " << key << "\n";
                return;
            }
            prev = current;
            current = current->next;
        } while (current != last->next);

        cout <<"Not found\n";
    }
    void deleteNode(int key) {
        if (last == NULL) {
            cout << "List is empty.\n";
            return;
        }
        Node* current = last->next;
        Node* prev = last;
        do {
            if (current->data == key) {
                if (current == last && current->next == last) {
                    last = NULL;
                }
                else if (current == last) {
                    prev->next = current->next;
                    last = prev;
                }
                else if (current == last->next) {
                    prev->next = current->next;
                    last->next = current->next;
                }
                else {
                    prev->next = current->next;
                }
                delete current;
                cout << "Node " << key << " deleted.\n";
                return;
            }
            prev = current;
            current = current->next;
        } while (current != last->next);
        cout <<"Not found\n";
    }
    void searchNode(int key) {
        if (last == NULL) {
            cout << "EMpty\n";
            return;
        }
        Node* temp = last->next;
        int pos = 1;
        do {
            if (temp->data == key) {
                cout << "Node " << key << " found at position " << pos << "\n";
                return;
            }
            temp = temp->next;
            pos++;
        } while (temp != last->next);
        cout <<"Not found\n";
    }
    void display() {
        if (last == NULL) {
            cout << "Empty\n";
            return;
        }
        Node* temp = last->next;
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != last->next);
        cout << endl;
    }
};
int main() {
    CLL list;
    int choice, value, key;
    do {
        cout << "\n--- CIRCULAR LINKED LIST MENU ---\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert After a Node\n";
        cout << "4. Insert Before a Node\n";
        cout << "5. Delete a Node\n";
        cout << "6. Search a Node\n";
        cout << "7. Display List\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                list.insertAtBeginning(value);
                break;
            case 2:
                cout << "Enter value to insert: ";
                cin >> value;
                list.insertAtEnd(value);
                break;
            case 3:
                cout << "Enter key after which to insert: ";
                cin >> key;
                cout << "Enter value to insert: ";
                cin >> value;
                list.insertAfter(key, value);
                break;
            case 4:
                cout << "Enter key before which to insert: ";
                cin >> key;
                cout << "Enter value to insert: ";
                cin >> value;
                list.insertBefore(key, value);
                break;
            case 5:
                cout << "Enter value to delete: ";
                cin >> key;
                list.deleteNode(key);
                break;
            case 6:
                cout << "Enter value to search: ";
                cin >> key;
                list.searchNode(key);
                break;
            case 7:
                list.display();
                break;
            case 8:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid!!!\n";
        }
    } while (choice != 8);
    return 0;
}
