#include <iostream>
using namespace std;
#define SIZE 5
class CircularQueue {
    int arr[SIZE];
    int front, rear, count;
public:
    CircularQueue() {
        front = 0;
        rear = -1;
        count = 0;
    }
    bool isFull() {
        return count == SIZE;
    }
    bool isEmpty() {
        return count == 0;
    }
    void enqueue(int x) {
        if (isFull()) {
            cout << "Queue Overflow!\n";
            return;
        }
        rear = (rear + 1) % SIZE;
        arr[rear] = x;
        count++;
        cout << x << " inserted.\n";
    }
    void dequeue() {
        if (isEmpty()) {
            cout << "Queue Underflow!\n";
            return;
        }
        cout << arr[front] << " removed.\n";
        front = (front + 1) % SIZE;
        count--;
    }
    void peek() {
        if (isEmpty()) {
            cout << "Queue Empty!\n";
            return;
        }
        cout << "Front Element: " << arr[front] << "\n";
    }
    void display() {
        if (isEmpty()) {
            cout << "Queue Empty!\n";
            return;
        }
        cout << "Queue: ";
        for (int i = 0; i < count; i++)
            cout << arr[(front + i) % SIZE] << " ";
        cout << "\n";
    }
};
int main() {
    CircularQueue q;
    int choice, val;

    do {
        cout << "\n--- Circular Queue Menu ---\n";
        cout << "1. Enqueue\n2. Dequeue\n3. Peek\n4. Display\n5. Exit\n";
        cout << "Enter choice: ";
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "Enter value: ";
            cin >> val;
            q.enqueue(val);
            break;
        case 2:
            q.dequeue();
            break;
        case 3:
            q.peek();
            break;
        case 4:
            q.display();
            break;
        case 5:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid Choice!\n";
        }
    } while (choice != 5);
}
