#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node* next;
    Node(int new_data) {
        data = new_data;
        next = nullptr;
    }
};
int countOccurrences(Node* head, int key) {
    int count = 0;
    Node* current = head;
    while (current != nullptr) {
        if (current->data == key) {
            count++;
        }
        current = current->next;
    }
    return count;
}
Node* deleteOccurrences(Node* head, int key) {
    while (head != nullptr && head->data == key) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
    Node* current = head;
    Node* prev = nullptr;
    while (current != nullptr) {
        if (current->data == key) {
            Node* temp = current;
            prev->next = current->next;
            current = current->next;
            delete temp;
        } 
        else {
            prev = current;
            current = current->next;
        }
    }
    return head;
}
void printList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data;
        if (current->next != nullptr)
            cout << "->";
        current = current->next;
    }
    cout << endl;
}
int main() {
    Node* head = new Node(1);
    head->next = new Node(2);
    head->next->next = new Node(1);
    head->next->next->next = new Node(2);
    head->next->next->next->next = new Node(1);
    head->next->next->next->next->next = new Node(3);
    head->next->next->next->next->next->next = new Node(1);
    int key = 1;
    int count = countOccurrences(head, key);
    head = deleteOccurrences(head, key);
    cout << "Count: " << count << endl;
    cout << "Updated Linked List: ";
    printList(head);
    return 0;
}
